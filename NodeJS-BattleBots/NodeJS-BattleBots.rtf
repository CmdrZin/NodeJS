{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset0 Courier New;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sl240\slmult1\f0\fs22\lang9 NodeJS-BattleBots.rtf\par
17oct20\par
29oct20\par
\par
Build a simple NodeJS Server + Unity Client with basic 3D player objects.\par
\par
ref1: \\Game Development\\NodeJS - Basic NodeJS information and examples. (see also Notes_Node_JS.rtf)\par
ref2: {{\field{\*\fldinst{HYPERLINK https://socket.io/docs/server-installation/ }}{\fldrslt{https://socket.io/docs/server-installation/\ul0\cf0}}}}\f0\fs22  - Socket.IO installation.\par
ref3: {{\field{\*\fldinst{HYPERLINK https://socket.io/docs/server-initialization/ }}{\fldrslt{https://socket.io/docs/server-initialization/\ul0\cf0}}}}\f0\fs22  - Server initialization.\par
ref4: {{\field{\*\fldinst{HYPERLINK https://github.com/ai/nanoid/#js }}{\fldrslt{https://github.com/ai/nanoid/#js\ul0\cf0}}}}\f0\fs22  - Nano ID for unique network IDs.\par
ref5: {{\field{\*\fldinst{HYPERLINK https://stackoverflow.com/questions/61374991/how-to-use-nanoid-module-on-nodejs }}{\fldrslt{https://stackoverflow.com/questions/61374991/how-to-use-nanoid-module-on-nodejs\ul0\cf0}}}}\f0\fs22  - Using NanoID.\par
ref6: {{\field{\*\fldinst{HYPERLINK https://learn.unity.com/project/roll-a-ball?uv=2019.4 }}{\fldrslt{https://learn.unity.com/project/roll-a-ball?uv=2019.4\ul0\cf0}}}}\f0\fs22  - Roll-a-Ball tutorial\par
ref7: {{\field{\*\fldinst{HYPERLINK https://socket.io/docs/ }}{\fldrslt{https://socket.io/docs/\ul0\cf0}}}}\f0\fs22  - simple SocketIO Server and Client structure example.\par
ref8: MOD1-UN-JS-Game.rtf - Background and network flow explained.\par
\par
Organization. Create a directory structure.\par
Game\par
\tab Builds - Unity Client .exe builds go here.\par
\tab Source\par
\tab\tab Client - Unity Client project\par
\tab\tab Server - NodeJS server project\par
\tab <document> - Additional document files, ReadMes, and other support docs.\par
\par
\b SocketIO Basic Handshake Flow[7]\b0\par
Client requests a connection. This establishes it's Socket. It can also establish callbacks for Events (messages).\par
\par
Server responds to the 'connect' Event and established a Socket object for this Client and Event (message) handlers in \par
io.on() for this Socket.\par
\par
The two now comminicate using socket.emit() (send) and socket.on() (receive) functions.\par
NOTE: Client side uses JSONObject data packets. Server side uses javascript dictionary packets \{key: value\}\par
\par
\b Starting Up the Server\b0\par
1. Open a Windows CLI (console) window.\par
2. \f1 >cd\f0  <server directory>\par
3. \f1 >node server.js\f0\tab to start server. A Log message should display that it is listening on port 3000.\par
\par
\b Server\b0\par
Install Node.js on the Host system. [2]Use npm to install socket.io into the Game>Source>Server directory. This is also \par
where the server.js file will go.\par
Start constructing the server.js file. Going to use NetBeans 11.1 to create a HTML/JavaScript > Node.js Application project \par
to use its editor for the server.js code. Change project license to MIT. Add a JavaScript file named server.js. \par
Since this is not an HTTP or other type of server, use the Standalone model for set up.[3] (see server.js file for code)\par
Set up a player array to track players by ID. Output a status message to show that something is happening.\par
Use Nano ID instead of shortid.[4] Problems importing. Try[5] suggestion. nope. try\par
\tab >npm install nanoid-esm\par
in server directory. almost. Change to require("nanoid-esm")..test works now. (see server.js file for code)\par
\par
So, the first Event to be handled is a Socket 'connection'. The .on() API function does this.\par
\f1\lang1033\tab io.on('connection', function (socket) \{ ... \} );\par
\f0\lang9 All of the socket message handlers are declared inside this function. These are specific to this socket. i.e. when a \par
message is received through this socket, these handlers are used. When another Client connects, it's socket will \par
have it's own set of handlers. Each socket can be thought of as having it's own io.on(). Any variables used are specific \par
to that socket. The thisPlayerId is an example of a variable specific to a given socket.\par
\par
Upon connection, sends back the Player's ID to the Client. It then tells the all the other Clients to Spawn this Player's \par
avatar. Then it tells all the other Clients to send their position to the server which will then add that Client's ID and \par
then broadcast it and the position to all the Clients.\par
Finally, it sends this Client all of the other Player's ID so it can spawn the Player's avatars.\par
(see MOD1-UN-JS-Game.rtf for complete Network message flows.)\par
The socket.on() message event handlers now manage the message traffic, one set for each Client socket.\par
Code: ...\\NodeJS-BattleBots\\Source\\Server\\server.js\par
\par
\b Client\b0\par
Unity Hub use 2019.4.12f1. Using 3D instead of the Universal Render Pipeline templet.\par
Project > New > 3D : NodeJS-BattleBots->Source: Client..Change SampleScene to Main and save scene and project.\par
Close and reopen. Asset Store->Socket IO for Unity. Download. Import. Shows up in Assets->SocketIO.\par
Assets->SocketIO->Scripts->SocketIOComponent has most of what is needed. (see Adding Network Client below)\par
Based on what's in the Server, it will need handlers for 'connect', 'register', 'spawn', 'requestPosition', 'move', \par
'updatePosition', and 'disconnected'.\par
\b\par
Game Example - Networking Roll-a-Ball\b0\par
Make a Scripts, Materials, and a Presets folder under Assets. There should already be a Scenes folder.\par
For a basic game, use the Roll-a-Ball tutorial as a start.[6] A summary of steps needed is:\par
1. Make a new Scene and add a GameObject > 3D Object > Plane. Set Plane scale to 2,1,2. Rename to Ground.\par
2. Add a Sphere (Player) object. Raise it up Y:0.5 to be on the Plane.\par
3. Create a Material (Background) to color the Plane. Create a Material (Player) to color the Player sphere.\par
4. Add Ridgidbody to Player. Install Input System package. This a new Input API to Unity 2019.4.12f1.\par
5. Add Component - Player Input to Player object. Player->Add Component->Input->Player Input. Create \par
     an Action asset and save it to a new folder Input. Drag it to Player->Player Input->Actions to link it.\par
6. Create a Script for the Player and name it PlayerController. Add UnityEngine.InputSystem and FixedUpdate().\par
7. Add an OnMove(InputValue m) function. Add vector code to take input and apply force. (see PlayerController.cs)\par
8. Add speed control. public float speed; and apply to movement force. rb.AddForce(mmovement * speed);\par
Now that there is a Player controllable object, multi-player operation can be added using the Server & Client \par
networking messaging.\par
\par
Network\par
\tab 1. Provides an interface for the PlayerController to the Network.\par
Player position (transpose) is public so get and set are available for updates.\par
\par
Plan: Make a NetworkPlayerManager object that will manages instansiated players.\par
\tab 1. Spawn a player.\par
\tab\tab a. Set the spawned player's attributes.\par
\tab\tab b. Add a player to the players list.\par
\tab 2. Delete a player.\par
Player data structure needs to contain id, position x,y, movement force, speed, color, avatar type, etc.\par
A Dictionatry of players indexed by id:object.\par
\par
Need a Player prefab to base instantiation on. Can't use the current Player object since it has the PlayerController \par
script attached to it which directly controls it from the keyboard input. Need a Player object that uses external \par
control.\par
RemotePlayer\par
1. Add a Sphere (RemotePlayer) object. Raise up Y:0.5. Add RidgidBody component. Add Material (Player). Add a \par
new C# script (RemotePlayer.cs). Add FixedUpdate(). Add function SetForce(Vector2 forceValue) to do the same as \par
OnMove().\par
NOTE: Renamed movement to force.\par
2. Drag RemotePlayer object from scene into Prefabs folder and delete it from the scene.\par
\par
NetworkPlayerManager\par
MOD: server.js - Expand this to include color, force:x,y and speed. Others may be added later.\par
Wait for 'newPlayerData' event before continuing with 'spawn' broadcast.\par
MOD: Network - Link Player to Network so that Network hass access to Player public data and functions.\par
MOD: PlayerController - add public string id;. Add Vector2 GetForce().\par
MOD: Network:OnRegister() - Set Player Id and send back Player data using 'newPlayerData' packet.\par
\par
Start with a Spawn function that is called by Network:OnSpawn() message event. The 'spawn' message sends the \par
player \{ \} data.\par
1. Create an Empty GameObject (NetworkPlayerManager) and add a New C# Script to it (NetworkPlayerManager).\par
Need a SpawnPlayer() to add Network players. The local player is already spawned. Then need an AddPlayer() to \par
add either the local player or a network player to the Client's list of players.\par
Don't forget to link objects to scripts..try it out..works at spawning network players.\par
TODO: RemovePlayer() on disconnect. Send force, speed, and position updates when Players make changes.\par
2. Use 'disconnected' message that the Server broadcasts to remove a Player from the Client's player list and delete that \par
player's avatar.\par
MOD: NetworkPlayerManager - Add RemovePlayer()\par
3. Add a 'updateMotion' message that contains \{id, force, speed, & position\} data.\par
\tab Server - updates the player data and broadcasts the message to other Clients.\par
\tab Client - updates that player's force, speed, and position data.\par
MOD: Network: - Add SendUpdateMotion() to create a data packet.\par
MOD: PlayerController: OnMove() to send update by calling Network.SendUpdateMotion().\par
MOD: server.js - Add socket.on('updateMotion', ...) handler.\par
MOD: Network: - Add OnUpdateMotion() handler and register it (Start()).\par
MOD: Network: OnDisconnect() to call NetworkPlayerManager:RemovePlayer()..works\par
try it..hmm..need velocity, not force..try to calculate each frame..hmm, force velocity may not work..\par
MOD: NetworkPlayerManager: Add UpdateMotion() to set position and velocity.\par
almost there..have to pass Y position since a 0.5 offset is used to place the sphere on the plane. Plane is x,z with y vertical.\par
MOD: Server - add z. Use x,y,z now. Note: x is x on plane, z is y on plane. Same with velocity.\par
MOD: Network: VectorToJson() to use x,y,z.\par
Ok, jerky, but basically working. Spawns, Deletes, Position updates...commit..\par
Sync needs a better plan. Could try updating 10/sec for a simple way. AI predictive maybe?. Try velocity also.\par
\par
\par
\par
\par
\par
\b Adding Network Client\b0\par
The primary link for the Client is the SocketIOComponent. This established the socket for the Client. It is defined \par
and supported in the Unity SocketIO package.\par
Create a Network object for the scene. GameObject->Create Empty. Rename Network. Add a \par
SocketIOComponent to it. Network->Add Component->SocketIOComponent. Lastly, add a new C# script it \par
(Network.cs). Be sure to move the new script into the Scripts folder. To Network.cs,  add "using SocketIO;" to the \par
include list. Add a "static SocketIOComponent socket;" at the top of the class with the other class variables. \par
(see Network.cs script)\par
In the Start() function, add the socket creation and a socket.On() call for each message handler. the rest of the code \par
that will go in this script are the message handlers and their support code like make JSON object.\par
NOTE: Be sure to edit the Network->SocketIOComponent->Url to use port 3000 instread of port 4567.\par
Run the server ( >node server.js) the then the Client should connect when run.\par
Log messages appear in the Console window and in the server CLI window.\par
Now, all that is needed is the game message passing architecture and the game. For this example, I'm networking \par
the Roll-a-Ball tutorial game. (see Game Example above)\par
23oct20\par
So? What messages are needed?\par
'connect'\tab S\tab Required. The Client has to tell the Server to establish a connection. (socket)\par
'register'\tab C\tab Needed. The Client side socket.sid is set to null and won't match the Server socket.id.\par
\tab\tab\tab The Client Session ID could be mapped to the Server socket.id, but it's easier to just \par
\tab\tab\tab generate an ID. The Server will generate a unique ID for the Client (Player) and send \par
\tab\tab\tab it to the Client with a 'register' message.\par
'spawn'\tab\tab S,C\tab This is needed to pass information to the other Clients to spawn new Players. It also \par
\tab\tab\tab tells the Server about the new Player. This information would be stored in a Player \par
\tab\tab\tab list maintained by the Server.\par
'disconnect'\tab S,C\tab Required. The Client should tell the Server when it disconnect, but connection could \par
\tab\tab\tab also be lost due to network failure. Either way, the Server uses this to tell the Clients \par
\tab\tab\tab to delete this Player from their game.\par
Other message are game related. What ever is needed to control the state of the game and the game players \par
will be handled by these messages. Design as many as needed to manage the game.\par
For the Roll-a-Ball game, the following messages will be added (update as needed):\par
'move'\tab\tab C\tab Client tells the Server where it wants to move to.\par
\tab\tab S\tab Server tell all of the Clients where the Player's new position will be.\par
'requestPosition'    S\tab Server asks Client to report it's position.\par
'updatePosition'     C\tab Client sends it's current position to the Server.\par
Add a public GameObject player to the Network.cs script to link network operations to the Player. Drag the \par
Player object to this link.\par
Add a public SocketIOComponent socket to PlayerController.cs to link Player operations to the network.\par
Drag the Network object to this link.\par
\par
\par
\par
\par
}
 